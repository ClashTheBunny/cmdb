{% if version == 4 %}
  {% set vlans = lookup("topology", "vlans") %}
  {% set addresses = lookup("topology", "addresses") -%}

  {# publics is for public interfaces, privates for private interfaces #}
  {% set publics = [] %}
  {% set privates = ["oob"] %}
  {% set rescue = [] -%}

  {% if lookup("topology", "rescue-interface") %}
    {% do rescue.append(lookup("topology", "rescue-interface")) %}
  {% endif %}
  {% for iface in lookup("topology", "bgp-interfaces") %}
    {% do publics.append(iface ~ "." ~ vlans.public) %}
    {% do privates.append(iface ~ "." ~ vlans.private) %}
  {% endfor %}
#!/usr/bin/nft -f

flush ruleset

table ip blade {
        set rfc1918 {
                type ipv4_addr
                flags interval
                elements = { 10.0.0.0/8, 172.16.0.0/12,
                             192.168.0.0/16 }
        }

        set iface-priv {
                type ifname
                elements = { {{ privates|join(", ") }} }
        }

        set iface-pub {
                type ifname
                elements = { {{ publics|join(", ") }} }
        }

        map nat-map {
                type ifname : ipv4_addr
                elements = {
  {% if rescue|length %}
                             "{{ rescue|first }}" : {{ addresses.rescue|ipaddr("address") }},
  {% endif %}
  {% for iface in publics if "oob" not in iface %}
                             "{{ iface }}" : {{ addresses.public|ipaddr("address") }},
  {% endfor %}
                }
        }

        map private-filter-accept-udp-map {
                type inet_service : verdict
                elements = { 53 : accept, 67 : accept, 69 : accept, 123 : accept, 161 : accept }
        }

        map private-filter-accept-tcp-map {
                type inet_service : verdict
                elements = { 80 : accept }
        }

        map specific-ip-tcp-map {
                type ipv4_addr . inet_service : verdict
                elements = {
  {% for other in devices("environment", "location", "groups==adm-gateway-l3") if device != other %}
                            {{ lookup("topology", "addresses", other).main }} . 647 : accept,
  {% endfor %}
                             {{ addresses.prometheus }} . 9100 : accept,
                             {{ addresses.prometheus }} . 9324 : accept, }
        }

        map forward-tcp-set {
                type inet_service : verdict
                flags interval
                elements = { 22 : accept, 80 : accept, 443 : accept, 830 : accept,
                             5120 : accept, 5123 : accept, 5556 : accept, 7578 : accept,
                             17990 : accept, 17988 : accept, 623 : accept, 5900-5910 : accept, 9100 : accept}
        }

        map forward-udp-set {
                type inet_service : verdict
                elements = { 161 : accept, 623 : accept }
        }

        chain mangle-prerouting {
                type filter hook prerouting priority -150; policy accept;
                iifname @iface-priv ip daddr @rfc1918 counter return
                iifname @iface-priv counter mark set mark & 0xfffffffc | 0x00000001
                iifname @iface-pub counter ct mark & 0x00000003 == 0x00000001 mark set mark & 0xfffffffc | 0x00000002
        }

        chain mangle-postrouting {
                type filter hook postrouting priority -150; policy accept;
                oifname "vti*" tcp flags & (syn|rst) == syn counter tcp option maxseg size set 1308
        }

        chain nat-prerouting {
                type nat hook prerouting priority -100; policy accept;
                jump nat-prerouting-specific-{{ host }}
        }

        chain nat-prerouting-specific-{{ host }} {
  {% for rule in lookup("system", "firewall").nat.prerouting|default([]) %}
                {{ rule }}
  {% endfor %}
        }

        chain nat-postrouting {
                type nat hook postrouting priority 100; policy accept;
                jump nat-postrouting-specific-{{ host }}
                mark & 0x00000003 == 0x00000001 counter ct mark set mark & 0x00000003
                ct mark & 0x00000003 == 0x00000001 counter snat to oifname map @nat-map
        }

        chain nat-postrouting-specific-{{ host }} {
  {% for rule in lookup("system", "firewall").nat.postrouting|default([]) %}
                {{ rule }}
  {% endfor %}
        }

        chain filter-input {
                type filter hook input priority 0; policy drop;
                jump filter-input-specific-{{ host }}
                ct state established,related counter accept
                iifname "lo" counter accept
                ip protocol esp counter accept
                tcp dport ssh counter accept
                udp dport isakmp counter accept
                iifname "vti*" tcp dport bgp counter accept
                iifname "vti*" udp dport snmp counter accept
                iifname @iface-priv ip protocol vrrp counter accept
                iifname @iface-priv udp dport vmap @private-filter-accept-udp-map counter
                iifname @iface-priv tcp dport vmap @private-filter-accept-tcp-map counter
                ip saddr . tcp dport vmap @specific-ip-tcp-map counter
                icmp type echo-request limit rate 100/second counter accept
                icmp type { redirect, echo-request } counter drop
                limit rate 1/second burst 5 packets log
        }

        chain filter-forward {
                type filter hook forward priority 0; policy drop;
                jump filter-forward-specific-{{ host }}
                ct state established,related counter accept
                oifname @iface-priv ct status dnat counter accept
                iifname @iface-priv oifname @iface-pub counter accept
                iifname "oob" oifname @iface-priv counter accept
                iifname @iface-priv oifname "oob" tcp dport vmap @forward-tcp-set counter
                iifname @iface-priv oifname "oob" udp dport vmap @forward-udp-set counter
                icmp type echo-request limit rate 1000/second burst 5 packets counter accept
                limit rate 1/second burst 5 packets log
        }

        chain filter-forward-specific-{{ host }} {
  {% for rule in lookup("system", "firewall").filter.forward|default([]) %}
                {{ rule }}
  {% endfor %}
        }
        chain filter-input-specific-{{ host }} {
  {% for rule in lookup("system", "firewall").filter.input|default([]) %}
                {{ rule }}
  {% endfor %}
        }
}
{% endif %}
